name: pestpp continuous integration

on: 
  schedule:
    - cron: '0 8 * * *' # run at 8 AM UTC (12 am PST)
  push:
  pull_request:

jobs:
  pestppCI:
    name: benchmarks
    runs-on: ubuntu-latest #${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest] 
        python-version: [3.8] # , 3.7, 3.6]
        run-type: [std]
        test_repo: [""]
        test_dir: [""]
        test_script: [""]
        include:
          - test_script: opt_test.py
          - test_repo: "https://github.com/pestpp/pestpp-opt_benchmarks"
          - test_dir: "pestpp-opt_benchmarks"

    steps:

    - uses:  actions/checkout@v2.3.4 
    # - name: Setup Ninja
      # if: ${{ runner.os == 'Windows' }} 
    - uses: seanmiddleditch/gha-setup-ninja@master
  
    - name: Cache Miniconda
      uses: actions/cache@v2.1.0
      env:
        # Increase this value to reset cache if environment.yml has changed
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.run-type }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('etc/environment.yml') }}
    
    - name: Set Windows ENV
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    # - name: Get specific version CMake, v3.19
    #   if: ${{ runner.os == 'Windows' }} 
    #   uses: lukka/get-cmake@latest

    # Standard python fails on windows without GDAL installation
    # Using custom bash shell ("shell: bash -l {0}") with Miniconda
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.0.0
      with:
        python-version: ${{ matrix.python-version }}
        mamba-version: "*"
        channels: conda-forge
        auto-update-conda: true
        activate-environment: pyemu
        use-only-tar-bz2: true

    - name: Add packages to pyemu environment using mamba or conda
      shell: bash -l {0}
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          conda env update --name pyemu --file etc/environment.yml
        else
          mamba env update --name pyemu --file etc/environment.yml
        fi
    
    - name: PESTPP exe install
      shell: bash -l {0}
      run: |
        mkdir build && cd build
        if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmake -GNinja -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_BUILD_TYPE=Release ..
            ninja
        else
            cmake -DCMAKE_BUILD_TYPE=Release ..
            make -j2
        fi
        cd ..
  
    - name: Install Flopy & pyemu?
      shell: bash -l {0}
      run: |
        git clone -b develop --depth 1 https://github.com/modflowpy/flopy.git
        cd flopy
        python setup.py install
        cd ..
        pip install https://github.com/modflowpy/pymake/zipball/master
        git clone -b develop --depth 1 https://github.com/pypest/pyemu.git
        cd pyemu
        python setup.py install
        cd ..



    
    - name: clone test repo ${{ matrix.test_repo }}
      if: ${{ matrix.test_repo }} != ""
      shell: bash -l {0}
      run: |
        git clone -b develop --depth 1 ${{ matrix.test_repo }}

    - name: catch empty script
      if: ${{ matrix.test_script }} != ""
      ${{ matrix.test_script }} = "basic_test.py"


    - name: catch empty dir
      if: ${{ matrix.test_dir }} != ""
      ${{ matrix.test_dir }} = "benchmarks"

    - name: ${{ matrix.test_script }}
      shell: bash -l {0}
      run: |
        cd ${{ matrix.test_dir }}
        nosetests -v ${{ matrix.test_script }}
        cd


